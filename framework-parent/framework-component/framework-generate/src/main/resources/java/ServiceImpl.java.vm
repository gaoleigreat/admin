package ${genconfig.serviceImplPackageName};


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import ${genconfig.daoPackageName}.${gentable.className}Mapper;
import ${genconfig.servicePackageName}.I${gentable.className}Service;
import ${genconfig.entityPackageName}.${gentable.className};

import java.util.List;
import java.util.Map;


/**
 * @description I${gentable.className} Serviceå±‚
 * @author ${genconfig.author}
 * @since jdk1.8
 */
@Service
public class ${gentable.className}ServiceImpl implements I${gentable.className}Service{


     @Autowired
     private ${gentable.className}Mapper ${gentable.camelCaseclassName}Mapper;

    @Override
    public int insert(${gentable.className} ${gentable.camelCaseclassName}) {
        return ${gentable.camelCaseclassName}Mapper.insert(${gentable.camelCaseclassName});
    }

    @Override
    public int insertSelective(${gentable.className} ${gentable.camelCaseclassName}) {
        return ${gentable.camelCaseclassName}Mapper.insertSelective(${gentable.camelCaseclassName});
    }

    @Override
    public int batchInsert(List<${gentable.className}> list) {
        return ${gentable.camelCaseclassName}Mapper.batchInsert(list);
    }

    @Override
    public int batchInsertSelective(List<${gentable.className}> list) {
        return ${gentable.camelCaseclassName}Mapper.batchInsertSelective(list);
    }

    @Override
    public int updateByPrimaryKey(${gentable.className} ${gentable.camelCaseclassName}) {
        return ${gentable.camelCaseclassName}Mapper.updateByPrimaryKey(${gentable.camelCaseclassName});
    }

    @Override
    public int updateSelectiveByPrimaryKey(${gentable.className} ${gentable.camelCaseclassName}) {
        return ${gentable.camelCaseclassName}Mapper.updateSelectiveByPrimaryKey(${gentable.camelCaseclassName});
    }

    @Override
    public int batchUpdate(List<${gentable.className}> list) {
        return ${gentable.camelCaseclassName}Mapper.batchUpdate(list);
    }

    @Override
    public int batchUpdateSelective(List<${gentable.className}> list) {
        return ${gentable.camelCaseclassName}Mapper.batchUpdateSelective(list);
    }

    @Override
    public int upsert(${gentable.className} ${gentable.camelCaseclassName}) {
        return ${gentable.camelCaseclassName}Mapper.upsert(${gentable.camelCaseclassName});
    }

    @Override
    public int upsertSelective(${gentable.className} ${gentable.camelCaseclassName}) {
        return ${gentable.camelCaseclassName}Mapper.upsertSelective(${gentable.camelCaseclassName});
    }

    @Override
    public int batchUpsert(List<${gentable.className}> list) {
        return ${gentable.camelCaseclassName}Mapper.batchUpsert(list);
    }

    @Override
    public int batchUpsertSelective(List<${gentable.className}> list) {
        return ${gentable.camelCaseclassName}Mapper.batchUpsertSelective(list);
    }

    @Override
    public int deleteByPrimaryKey(${gentable.pkColumn.javaType} ${gentable.pkColumn.javaFieldName}) {
        return ${gentable.camelCaseclassName}Mapper.deleteByPrimaryKey(${gentable.pkColumn.javaFieldName});
    }

    @Override
    public int deleteBatchByPrimaryKeys(List<${gentable.pkColumn.javaType}> list) {
        return ${gentable.camelCaseclassName}Mapper.deleteBatchByPrimaryKeys(list);
    }

    @Override
    public int delete(${gentable.className} ${gentable.camelCaseclassName}) {
        return ${gentable.camelCaseclassName}Mapper.delete(${gentable.camelCaseclassName});
    }

    @Override
    public ${gentable.className} queryByPrimaryKey(${gentable.pkColumn.javaType} ${gentable.pkColumn.javaFieldName}) {
        return ${gentable.camelCaseclassName}Mapper.queryByPrimaryKey(${gentable.pkColumn.javaFieldName});
    }

    @Override
    public List<${gentable.className}> queryBatchPrimaryKeys(List<${gentable.pkColumn.javaType}> list) {
        return ${gentable.camelCaseclassName}Mapper.queryBatchPrimaryKeys(list);
    }

    @Override
    public ${gentable.className} queryOne(${gentable.className} ${gentable.camelCaseclassName}) {
        return ${gentable.camelCaseclassName}Mapper.queryOne(${gentable.camelCaseclassName});
    }

    @Override
    public List<${gentable.className}> queryByCondition(${gentable.className} ${gentable.camelCaseclassName}) {
        return ${gentable.camelCaseclassName}Mapper.queryByCondition(${gentable.camelCaseclassName});
    }

    @Override
    public List<${gentable.className}> queryFuzzy(${gentable.className} ${gentable.camelCaseclassName}) {
        return ${gentable.camelCaseclassName}Mapper.queryFuzzy(${gentable.camelCaseclassName});
    }

    @Override
    public List<${gentable.className}> queryByLikeCondition(${gentable.className} ${gentable.camelCaseclassName}) {
        return ${gentable.camelCaseclassName}Mapper.queryByLikeCondition(${gentable.camelCaseclassName});
    }

    @Override
    public int queryCount(${gentable.className} ${gentable.camelCaseclassName}) {
        return ${gentable.camelCaseclassName}Mapper.queryCount(${gentable.camelCaseclassName});
    }

    @Override
    public List<Map<String, Object>> statisticsGroup(${gentable.className} ${gentable.camelCaseclassName}) {
        return ${gentable.camelCaseclassName}Mapper.statisticsGroup(${gentable.camelCaseclassName});
    }

    @Override
    public List<Map<String, Object>> statisticsGroupByDay(${gentable.className} ${gentable.camelCaseclassName}) {
        return ${gentable.camelCaseclassName}Mapper.statisticsGroupByDay(${gentable.camelCaseclassName});
    }

    @Override
    public List<Map<String, Object>> statisticsGroupByMonth(${gentable.className} ${gentable.camelCaseclassName}) {
        return ${gentable.camelCaseclassName}Mapper.statisticsGroupByMonth(${gentable.camelCaseclassName});
    }

    @Override
    public List<Map<String, Object>> statisticsGroupByYear(${gentable.className} ${gentable.camelCaseclassName}) {
        return ${gentable.camelCaseclassName}Mapper.statisticsGroupByYear(${gentable.camelCaseclassName});
    }
}