package ${gentable.packageName}.controller;
import com.baomidou.mybatisplus.core.metadata.IPage;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.CollectionUtils;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import com.xiaodao.core.vo.RespVO;
import com.xiaodao.core.vo.RespVOBuilder;
import ${gentable.packageName}.service.I${gentable.className}Service;
import ${gentable.packageName}.entity.${gentable.className};
import java.util.List;


/**
 * ${gentable.className}
 *
 * @author ${gentable.author}
 * @email 513684652@qq.com
 * @since jdk 1.8
 */
@RestController
@RequestMapping("/${gentable.camelCaseclassName}")
@Api(value = "${gentable.className}管理", tags = "${gentable.className}管理")
@Validated
@Slf4j
public class ${gentable.className}Controller {
    @Autowired
    private I${gentable.className}Service ${gentable.camelCaseclassName}Service;

    @ApiOperation(value = "分页查询${gentable.className}", notes = "分页查询${gentable.className}")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageIndex", value = "当前页", dataType = "int", required = true, example = "1", paramType = "query"),
            @ApiImplicitParam(name = "pageSize", value = "每页大小", dataType = "int", defaultValue = "10", example = "10", paramType = "query"),
    })
    @GetMapping("/")
    public RespVO<IPage<${gentable.className}>> queryPage(@RequestParam(value = "pageIndex") int pageIndex,
                                                          @RequestParam(required = false, defaultValue = "10") int pageSize) {
        IPage<${gentable.className}> iPage = ${gentable.camelCaseclassName}Service.queryPage(pageIndex, pageSize, new ${gentable.className}());
        return RespVOBuilder.success(iPage);
    }

    @ApiOperation(value = "通过主键${gentable.pkColumn.javaFieldName}查询${gentable.className}", notes = "通过主键${gentable.pkColumn.javaFieldName}查询${gentable.className}")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${gentable.pkColumn.javaFieldName}", paramType = "path", value = "${gentable.pkColumn.javaFieldName}", required = true, dataType = "${gentable.pkColumn.javaType}")
    })
    @GetMapping("/{${gentable.pkColumn.javaFieldName}}")
    public RespVO<${gentable.className}> selectByPrimaryKey(@PathVariable(value = "${gentable.pkColumn.javaFieldName}") ${gentable.pkColumn.javaType} ${gentable.pkColumn.javaFieldName}) {
        ${gentable.className} ${gentable.camelCaseclassName} =
            ${gentable.camelCaseclassName}Service.selectByPrimaryKey(${gentable.pkColumn.javaFieldName});
        if (${gentable.camelCaseclassName} == null){
            return RespVOBuilder.failure("当前${gentable.className}不存在");
        } else{
            return RespVOBuilder.success(${gentable.camelCaseclassName});
        }
    }

    @ApiOperation(value = "通过主键${gentable.pkColumn.javaFieldName}删除${gentable.className}", notes = "通过主键${gentable.pkColumn.javaFieldName}删除${gentable.className}")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${gentable.pkColumn.javaFieldName}", paramType = "path", value = "${gentable.pkColumn.javaFieldName}", required = true, dataType = "${gentable.pkColumn.javaType}")
    })
    @DeleteMapping("/{${gentable.pkColumn.javaFieldName}}")
    public RespVO deleteByPrimaryKey(@PathVariable(value = "${gentable.pkColumn.javaFieldName}") ${gentable.pkColumn.javaType} ${gentable.pkColumn.javaFieldName}) {
        Integer num = ${gentable.camelCaseclassName}Service.deleteByPrimaryKey(${gentable.pkColumn.javaFieldName});
        if (num == 0) {
            return RespVOBuilder.failure("删除${gentable.className}失败");
        } else {
            return RespVOBuilder.success("删除${gentable.className}成功");
        }
    }

    @ApiOperation(value = "新增${gentable.className}", notes = "新增${gentable.className}")
    @ApiImplicitParams({
    })
    @PostMapping("/")
    public RespVO insert(@RequestBody ${gentable.className} ${gentable.camelCaseclassName}) {
        if (${gentable.camelCaseclassName} == null){
            return RespVOBuilder.failure("参数不能为空");
        }
        Integer num = ${gentable.camelCaseclassName}Service.insert(${gentable.camelCaseclassName});
        if (num == 0) {
            return RespVOBuilder.failure("添加${gentable.className}失败");
        } else {
            return RespVOBuilder.success("添加${gentable.className}成功");
        }
    }

    @ApiOperation(value = "修改${gentable.className}", notes = "修改${gentable.className}")
    @ApiImplicitParams({
    })
    @PutMapping("/")
    public RespVO updateByPrimaryKey(@RequestBody ${gentable.className} ${gentable.camelCaseclassName}) {
        if (${gentable.camelCaseclassName} == null){
            return RespVOBuilder.failure("参数不能为空");
        }
        Integer num = ${gentable.camelCaseclassName}Service.updateByPrimaryKey(${gentable.camelCaseclassName});
        if (num == 0) {
            return RespVOBuilder.failure("修改${gentable.className}失败");
        } else {
            return RespVOBuilder.success("修改${gentable.className}成功");
        }
    }


    @ApiOperation(value = "通过主键${gentable.pkColumn.javaFieldName}批量删除${gentable.className}", notes = "通过主键${gentable.pkColumn.javaFieldName}批量删除${gentable.className}")
    @ApiImplicitParams({
    })
    @DeleteMapping("/deleteBatchPrimaryKeys")
    public RespVO deleteBatchPrimaryKeys(@RequestBody List<${gentable.pkColumn.javaType}> list) {
        if (CollectionUtils.isEmpty(list)) {
            return RespVOBuilder.failure("参数不能为空");
        }
        Integer num = ${gentable.camelCaseclassName}Service.deleteBatchIds(list);
        if (num == 0) {
            return RespVOBuilder.failure("批量删除${gentable.className}失败");
        } else {
            return RespVOBuilder.success("批量删除${gentable.className}成功");
        }
    }


    @ApiOperation(value = "条件查询${gentable.className}", notes = "条件查询${gentable.className}")
    @ApiImplicitParams({
    })
    @PostMapping("/list")
    public RespVO query(@RequestBody ${gentable.className} ${gentable.camelCaseclassName}) {
        if (${gentable.camelCaseclassName} ==null){
            return RespVOBuilder.failure("参数不能为空");
        }
        List<${gentable.className}> list = ${gentable.camelCaseclassName}Service.query(${gentable.camelCaseclassName});
        return RespVOBuilder.success(list);
    }
}
